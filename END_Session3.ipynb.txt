{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of END_Session3.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qRIBhOLOtJUa"
      },
      "source": [
        "Write a function using only list filter lambda that can tell whether a number is a Fibonacci number or not. You can use a pre-calculated list/dict to store fab numbers till 10000 "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Yphv1WOeozFI"
      },
      "source": [
        "def isafab(num_list):\n",
        "\n",
        "  # Fab numbers till 10000\n",
        "  fab_list = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765] \n",
        "\n",
        "  result = filter(lambda num: True if num in fab_list else False , num_list)\n",
        "  print(list(result))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uj-E0i3gBCqB",
        "outputId": "df5cf0ab-f654-42ea-f478-13acb8fa7621",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "isafab(num_list=[1,3,90,150,300,500,610,987])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1, 3, 610, 987]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uK3KX3TcUoYa"
      },
      "source": [
        "Using list comprehension (and zip/lambda/etc if required) write five different expressions that: PTS:100\n",
        "\n",
        "add 2 iterables a and b such that a is even and b is odd\n",
        "\n",
        "strips every vowel from a string provided (tsai>>t s)\n",
        "\n",
        "acts like a ReLU function for a 1D array\n",
        "\n",
        "acts like a sigmoid function for a 1D array\n",
        "\n",
        "takes a small character string and shifts all characters by 5 (handle boundary conditions) tsai>>yxfn"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FacJfv4AzsA_",
        "outputId": "bbe06705-3700-4d29-c2af-3129bcde7105",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# add 2 iterables a and b such that a is even and b is odd\n",
        "\n",
        "a = [1,2,3,4]\n",
        "b = [5,6,7]\n",
        "\n",
        "c = [i + j for i in a for j in b]\n",
        "print(c)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[6, 7, 8, 7, 8, 9, 8, 9, 10, 9, 10, 11]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ETUKdJ5uY5Dd",
        "outputId": "8f0981cd-6e61-48e2-f206-b3ecae2e1abc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# strips every vowel from a string provided (tsai>>t s)\n",
        "vowels = ['a','e','i','o','u']\n",
        "s = 'tsai'\n",
        "result = ' '.join([ i for i in s if i not in vowels ])\n",
        "print(result)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "t s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "imPnf3ChaDyY",
        "outputId": "3c43edb4-c7b7-4672-f94d-ad5664b468b0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# acts like a ReLU function for a 1D array\n",
        "\n",
        "oned_arr = [0, -1, -2, 5, 6, 0, -9]\n",
        "\n",
        "result = [max(0,i) for i in oned_arr]\n",
        "print(result)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0, 0, 0, 5, 6, 0, 0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "muQCHX9-ehGg",
        "outputId": "d5c84627-e5db-4bb2-a0ae-4fc6e14dd7a1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# acts like a sigmoid function for a 1D array\n",
        "import numpy as np\n",
        "\n",
        "oned_arr = [0, -1, -2, 5, 6, 0, -9]\n",
        "sig_func = lambda x: (1/(1 + np.exp(-x)))\n",
        "result = [sig_func(i) for i in oned_arr]\n",
        "\n",
        "print(result)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.5, 0.2689414213699951, 0.11920292202211755, 0.9933071490757153, 0.9975273768433653, 0.5, 0.00012339457598623172]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9us1cyzffh3l",
        "outputId": "ca2eb01c-6e78-4a8f-ec98-8a562c005e0b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# takes a small character string and shifts all characters by 5 (handle boundary conditions) tsai>>yxfn\n",
        "s = 'tsai'\n",
        "n = 5\n",
        "result = ''.join([chr((ord(char) - 97 + n) % 26 + 97) for char in s])\n",
        "print(result)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "yxfn\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iauDaD5zniro"
      },
      "source": [
        "A list comprehension expression that takes a ~200 word paragraph (write your own paragraph to check), and checks whether it has any of the swear words mentioned in https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt PTS:200"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UMkhJELIh5T1",
        "outputId": "fc512cd2-8a71-4cd1-a31a-dc9869d0fb90",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "import requests\n",
        "url = 'https://raw.githubusercontent.com/RobertJGabriel/Google-profanity-words/master/list.txt'\n",
        "r = requests.get(url)\n",
        "swear_words = r.text.split('\\n')\n",
        "paragraph1 = \"\"\"\n",
        "Machine learning is an application of artificial intelligence (AI) that provides systems the ability to automatically learn and improve from experience without being explicitly programmed. Machine learning focuses on the development of computer programs that can access data and use it learn for themselves\n",
        "\"\"\"\n",
        "paragraph2 = \"\"\"\n",
        "Be warned that an asshole is not synonymous for douchebag. A genuine asshole is the lethal combination of intelligence and arrogance. Assholes will attempt to humiliate you, and unfortunately, they generally succeed due to their intelligence. Douchebags, on the other hand, consist of only arrogance. They only think they are smart. Douchebags do not know they are douchebags because of their extreme egotistic tendencies. However, the asshole will always know they are an asshole.\n",
        "\"\"\"\n",
        "\n",
        "# Paragraph 1\n",
        "print(\"Paragraph 1\")\n",
        "print(any(word in paragraph1.split() for word in swear_words))\n",
        "print(\"Paragraph 2\")\n",
        "# Paragraph 2 \n",
        "print(any(word in paragraph2.split() for word in swear_words))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Paragraph 1\n",
            "False\n",
            "Paragraph 2\n",
            "True\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nZ6jEYzL2DtO"
      },
      "source": [
        "Using reduce functions: PTS:100\n",
        "\n",
        "add only even numbers in a list\n",
        "\n",
        "find the biggest character in a string (printable ascii characters)\n",
        "\n",
        "adds every 3rd number in a list"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3l9cpDDU0Wk4",
        "outputId": "95141e7a-a92b-499c-fcb5-088444c425cb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from functools import reduce\n",
        "\n",
        "# add only even numbers in a list\n",
        "numbers = [1, 6, 15, 12, 87, 10]\n",
        "#even_nos = [num for num in numbers if num % 2 == 0] \n",
        "print(reduce(lambda a,b : a+b, [num for num in numbers if num % 2 == 0] )) "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "28\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cqDE2fSQ2O_N",
        "outputId": "8a7cda36-e679-4357-e168-7761cff7ab25",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# find the biggest character in a string (printable ascii characters)\n",
        "\n",
        "s = \"Machine Learning\"\n",
        "\n",
        "#s_val = [ord(i) for i in s]\n",
        "print(\"Biggest Character in the string is '\",chr(reduce(lambda a,b : a if a >b else b ,[ord(i) for i in s])) + \"'\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Biggest Character in the string is ' r'\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tXfT65oqAbzr",
        "outputId": "bc7ad3bd-5233-4890-f0ad-89b1607cc3e0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "# adds every 3rd number in a list\n",
        "numbers = [1, 6, 15, 12, 87, 10, 15,21,55,1,0,4,5,7]\n",
        "\n",
        "#every_third_elements = numbers[::3]\n",
        "\n",
        "print(reduce(lambda a,b : a+b, numbers[::3])) \n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "34\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NrS0WWdn5j3u"
      },
      "source": [
        "Using randint, random.choice and list comprehensions, write an expression that generates 15 random KADDAADDDD number plates, where KA is fixed, D stands for a digit, and A stands for Capital alphabets. 10<<DD<<99 & 1000<<DDDD<<9999 PTS:100"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O7pHo7TH5O6E",
        "outputId": "1be4d4f4-9a55-4fc5-e309-daa13efc1c68",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "import random\n",
        "import string \n",
        "\n",
        "print('\\n'.join(['KA'+ str(random.randint(10,99)) + random.choice(list(string.ascii_uppercase)) * 2 + str(random.randint(1000,9999)) for _ in range(15)]))\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "KA13KK8352\n",
            "KA51EE4755\n",
            "KA35MM5945\n",
            "KA29HH5869\n",
            "KA45II7967\n",
            "KA89GG9333\n",
            "KA46AA9796\n",
            "KA81II2612\n",
            "KA49WW6387\n",
            "KA38UU5954\n",
            "KA65FF2137\n",
            "KA12DD2413\n",
            "KA12KK2009\n",
            "KA43WW7379\n",
            "KA90MM2058\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qtbgv5-L_dZ5"
      },
      "source": [
        "Write the above again from scratch where KA can be changed to DL, and 1000/9999 ranges can be provided.  PTS:100"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2sp4Mkjn6DLA",
        "outputId": "1ff4cb8c-0c26-48e3-bf2b-a54a2d31b7a4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "import random\n",
        "import string \n",
        "\n",
        "def generate(letter='KA', range1=1000, range2=9999):\n",
        "  return '\\n'.join([letter + str(random.randint(10,99)) + random.choice(list(string.ascii_uppercase)) * 2 + str(random.randint(range1,range2)) for _ in range(15)])\n",
        "\n",
        "\n",
        "print(generate(letter='DL'))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "DL21MM3043\n",
            "DL43TT1895\n",
            "DL66OO2809\n",
            "DL12DD9713\n",
            "DL13UU3582\n",
            "DL85GG4496\n",
            "DL71SS3259\n",
            "DL89OO9429\n",
            "DL27OO1606\n",
            "DL35CC2981\n",
            "DL33RR2098\n",
            "DL28ZZ7842\n",
            "DL99KK9783\n",
            "DL20JJ1725\n",
            "DL57MM2118\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NBQIPrX890WC"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}